/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 bool cmp(Interval a,Interval b)
 {
     return a.start<=b.start;
 }
vector<Interval> Solution::merge(vector<Interval> &intervals) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details

    sort(intervals.begin(),intervals.end(),cmp);
    //now merge
    int i=1,j=0;
    while(i<intervals.size())
    {
        if(intervals[j].end>=intervals[i].start)
        {
            //merge
            intervals[j].end=max(intervals[i].end,intervals[j].end);
        }
        else
        {
            j++;
            intervals[j]=intervals[i];
        }
        i++;
    }
    intervals.erase(intervals.begin()+j+1,intervals.end());
    return intervals;
}
